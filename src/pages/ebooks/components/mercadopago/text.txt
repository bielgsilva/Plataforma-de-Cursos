  <form id="form-checkout" action="/process_payment" method="post">
        <div>
          <div>
            <label htmlFor="payerFirstName">Nome</label>
            <input id="form-checkout__payerFirstName" name="payerFirstName" type="text" />
          </div>
          <div>
            <label htmlFor="payerLastName">Sobrenome</label>
            <input id="form-checkout__payerLastName" name="payerLastName" type="text" />
          </div>
          <div>
            <label htmlFor="email">E-mail</label>
            <input id="form-checkout__email" name="email" type="text" />
          </div>
          <div>
            <label htmlFor="identificationType">Tipo de documento</label>
            <select id="form-checkout__identificationType" name="identificationType">
              {/* Aqui você deve adicionar as opções do select */}
            </select>
          </div>
          <div>
            <label htmlFor="identificationNumber">Número do documento</label>
            <input id="form-checkout__identificationNumber" name="identificationNumber" type="text" />
          </div>
        </div>

        <div>
          <div>
            <input type="hidden" name="transactionAmount" id="transactionAmount" value="100" />
            <input type="hidden" name="description" id="description" value="Nome do Produto" />
            <br />
            <button type="submit">Pagar</button>
          </div>
        </div>
      </form>




      '@mercadopago/sdk-react'

      import './styles.css';
import { useState, useEffect } from 'react';
import { initMercadoPago } from '@mercadopago/sdk-react'; // Importe a função de inicialização do Mercado Pago

const publicKey = 'TEST-91e18a74-6afc-4ad2-99a7-6686ff2d4c0f';

const MercadoPagoPage = ({ bookPrice, closeMercadoPago, total }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [qrCode, setQrCode] = useState('');

  useEffect(() => {
    // Função assíncrona para carregar os tipos de identificação
    async function getIdentificationTypes() {
      try {
        // Inicialize o Mercado Pago SDK com sua chave pública
        MP.init(publicKey);

        // Obtém os tipos de identificação
        const identificationTypes = await MP.getIdentificationTypes();
        const identificationTypeElement = document.getElementById('form-checkout__identificationType');

        createSelectOptions(identificationTypeElement, identificationTypes);
        setIsLoading(false); // Define isLoading como falso após carregar os tipos de identificação
      } catch (e) {
        console.error('Error getting identificationTypes: ', e);
      }
    }

    getIdentificationTypes();
  }, []);

  function createSelectOptions(elem, options, labelsAndKeys = { label: "name", value: "id" }) {
    const { label, value } = labelsAndKeys;

    elem.options.length = 0;

    const tempOptions = document.createDocumentFragment();

    options.forEach(option => {
      const optValue = option[value];
      const optLabel = option[label];

      const opt = document.createElement('option');
      opt.value = optValue;
      opt.textContent = optLabel;

      tempOptions.appendChild(opt);
    });

    elem.appendChild(tempOptions);
  }

  useEffect(() => {
    // Função para criar o pagamento com Pix
    async function createPixPayment() {
      try {
        const paymentData = {
          transaction_amount: bookPrice, // Use o valor do livro como transação
          description: 'Título do produto',
          payment_method_id: 'pix',
          payer: {
            email: 'PAYER_EMAIL',
            first_name: 'Test',
            last_name: 'User',
            identification: {
              type: 'CPF',
              number: '19119119100'
            },
            address: {
              zip_code: '06233200',
              street_name: 'Av. das Nações Unidas',
              street_number: '3003',
              neighborhood: 'Bonfim',
              city: 'Osasco',
              federal_unit: 'SP'
            }
          }
        };

        // Fazer a solicitação POST para criar o pagamento
        const response = await MP.post('/v1/payments', paymentData);

        const qrCodeBase64 = response.body.qr_code_base64;
        setQrCode(qrCodeBase64);
      } catch (error) {
        console.error('Error creating Pix payment: ', error);
      }
    }

    createPixPayment();
  }, [bookPrice]);

  return (
    <div className="mercadopago-container flex-center">
      {isLoading && <div className="loading">Carregando...</div>}

      <a href={`https://www.mercadopago.com.br/payments/123456789/ticket?caller_id=123456&hash=${qrCode}`} target="_blank" rel="noreferrer">Pagar com Pix</a>

      <img src={`data:image/jpeg;base64,${qrCode}`} alt="QR Code" />

      <label htmlFor="copiar">Copiar Hash:</label>
      <input type="text" id="copiar" value={qrCode} readOnly />
    </div>
  );
};

export default MercadoPagoPage;
